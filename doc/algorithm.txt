General approach:

- a series of editing operations on alignment blocks
- multiple editing passes over the data
- alignments are always valid at the end of a pass.



# join duplications blocks in a MAF
joinDups(malnSet)
  - foreach block-A in malnSet:
    - foreach block-B in malnSet where its root component overlaps
              the block A root component:
      - merge block-B into block-A
      - delete block-B.

# load a MAF file into an malnSet
loadMaf(mafFile)
  - convert MAF to an malnSet
  - joinDups(malnSet)

# Join two malnSet objects based on a guide genome
malnJoinSets(guideGenome, malnSet1, malnSet2, maxBlkWidth)
  - create empty malnSetJoin
  - foreach block-A in malnSet1:
    - foreach guideGenome component-A in block-A:
      - foreach component-B in malnSet2 with overlaps with component-A:
          # while adjacent components could be merge here, this can lead to an
            exponential grown in the cost of merges when there are long root
            sequences and also create very large MAF blocks, connect only by
            the root.
        - if component-A and component-B can be merged (one is a root):
          - if root component extends beyond the bound of the target leaf component,
            then the block with the root component into multiple block before setting
            the parent.  This prevents incorrect inferences of the parents of the
            extended bases.
          - merge block-A and block-B into new block-C.  
            # While the input will only have merges of root components to leaf
              components, a merge makes the root an internal node and so
              transitive merges can be root to internal component.
        - continue scanning for others to merge into block-C

# join blocks with overlapping or adjacent root components.  Only join
# adjacent roots if there are components that cross the block.  Always join
# overlapping
joinOverlapAdjacent(malnSet)

# merge components in blocks that could be one component
mergeComps(malnSet)
  - <FILL IN>

- mafJoin(guideGenome, maf1File, maf2File, mafOutFile):
  - malnSet1 = loadMaf(maf1)
  - malnSet2 = loadMaf(maf2)
  - malnSetJoin = malnJoinSets(guideGenome, malnSet1, malnSet2, maxBlkWidth)
  - joinOverlapAdjacent(malnSet)
  - mergeComps(malnSet)
